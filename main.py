# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '1.0wowServer.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import downloadFile as dF
import apiconnect as api
import test_setting as ts


class CheckBox:

    def __init__(self, x, y, name, server_id, tab):
        self.position_x = x
        self.position_y = y
        self.geometry_x = 0
        self.geometry_y = 0
        self.server_name = name
        self.server_id = server_id

        self.checkBox = QtWidgets.QCheckBox(tab)
        self.checkBox.setGeometry(QtCore.QRect(self.position_x, self.position_y, 120, 20))
        self.checkBox.setObjectName(self.server_name)

    def add_to_retlanslateUi(self):
        return self.server_name

    def return_id_and_name(self):
        return self.server_name, self.server_id


class Ui_MainWindow(object):

    def __init__(self):
        self.checkbox_objects = []
        self.selected_object = []

    def radioButtons(self):

        # ustawienie radiobutton powinno byc domyslnie na 3600
        timer = 3600
        if self.radioButton.isChecked():
            print("radio buton 1h")
            timer = 3600

        elif self.radioButton_2.isChecked():
            print("radio buton 12h ")
            timer = 3600 * 12

        elif self.radioButton_3.isChecked():
            print("radio buton 24h")
            timer = 3600 * 24

        return timer

    def createCheckBoxServer(self):
        # for loop with expand servers return list of objects?
        checkBoxsList = []
        x = 10
        y = 20
        servers_list = dF.rl.list_class_server
        for singleServer in servers_list:
            server_id = singleServer.id_group
            name = singleServer.list_of_server[0]['name']['en_GB']
             # print(name + " " + str(server_id) + " " + str(x))
            #         create check box for this singleServer
            singleCheckBox_object = CheckBox(x, y, name, server_id, self.tab_2)
            checkBoxsList.append(singleCheckBox_object)
            y += 15
            if y > 320:
                y = 20
                x += 120
        return checkBoxsList

    def set_text_in(self, list, object):
        text_list = []
        for item in list:
            text_list.append(item.server_name)
        text_list.sort()
        convert_list_to_string = " ".join(text_list)
        object.setText(convert_list_to_string)

    def set_text_window1(self, list, object):
        text_list = []
        for item in list:
            text_list.append(item)
        convert_list_to_string = " ".join(text_list)
        object.setText(convert_list_to_string)

    def returnValuesFromCheckedBox(self):
        temp_check_list = []
        for element_of_list in self.checkbox_objects:
            # print(element_of_list.checkBox.isChecked())
            if element_of_list.checkBox.isChecked():
                temp_check_list.append(element_of_list)
        print(temp_check_list)
        self.selected_object = temp_check_list
        self.set_text_in(temp_check_list, self.textBrowser_2)

    def downloadFile(self):
        # radiobutton timer

        timer = self.radioButtons()
        list_objects = self.selected_object

        for x in range(len(list_objects)):
            print(list_objects[x].server_name)

        if len(list_objects) > 0:
            print('start server download')


            temp_text_list = ['Downloads: ']
            for y in range(len(list_objects)):
                directory = api.create_new_folder(list_objects[y].server_id)
                api.auction_house_download(list_objects[y].server_id, directory)
                temp_text_list.append(list_objects[y].server_name)
            print(temp_text_list)

            print("dodaje do textBrowser")
            self.set_text_window1(temp_text_list, self.textBrowser)

    def buttonSaveSetting(self):
        ts.get_list_to_setting_and_save_them(self.selected_object)

    def downloadButtonFromSetting(self):

        load_id_name = ts.load_id_server_and_name_from_csv_file(ts.load_file_settings(ts.set_file_name))
        name_list = load_id_name[0]
        id_list = load_id_name[1]
        print(name_list)
        print(id_list)
        counter = 0
        temp_text_list = ['Downloads: ']
        for id in id_list:

            directory = api.create_new_folder(id)
            api.auction_house_download(id, directory)
            temp_text_list.append(name_list[counter])
            counter += 1

        print(temp_text_list)
        print("dodaje do textBrowser")
        self.set_text_window1(temp_text_list, self.textBrowser)



    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(620, 410)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 600, 400))
        self.tabWidget.setObjectName("tabWidget")

        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")

        self.pushButton_2 = QtWidgets.QPushButton(self.tab)
        self.pushButton_2.setGeometry(QtCore.QRect(10, 10, 391, 31))
        self.pushButton_2.setObjectName("pushButton_2")

        self.pushButton_3 = QtWidgets.QPushButton(self.tab)
        self.pushButton_3.setGeometry(QtCore.QRect(410, 60, 180, 40))
        self.pushButton_3.setObjectName("pushButton_3")

        self.pushButton_4 = QtWidgets.QPushButton(self.tab)
        self.pushButton_4.setGeometry(QtCore.QRect(410, 120, 180, 40))
        self.pushButton_4.setObjectName("pushButton_3")

        # Added
        self.pushButton_2.clicked.connect(self.downloadFile)
        self.pushButton_3.clicked.connect(self.buttonSaveSetting)
        self.pushButton_4.clicked.connect(self.downloadButtonFromSetting)



        # Disabled
        # self.radioButton = QtWidgets.QRadioButton(self.tab)
        # self.radioButton.setGeometry(QtCore.QRect(20, 50, 82, 17))
        # self.radioButton.setObjectName("radioButton_3")
        # self.radioButton_2 = QtWidgets.QRadioButton(self.tab)
        # self.radioButton_2.setGeometry(QtCore.QRect(100, 50, 82, 17))
        # self.radioButton_2.setObjectName("radioButton")
        # self.radioButton_3 = QtWidgets.QRadioButton(self.tab)
        # self.radioButton_3.setGeometry(QtCore.QRect(170, 50, 82, 17))
        # self.radioButton_3.setObjectName("radioButton_2")

        self.textBrowser = QtWidgets.QTextBrowser(self.tab)
        self.textBrowser.setGeometry(QtCore.QRect(10, 80, 191, 251))
        self.textBrowser.setObjectName("textBrowser")

        self.textBrowser_2 = QtWidgets.QTextBrowser(self.tab)
        self.textBrowser_2.setGeometry(QtCore.QRect(210, 80, 191, 251))
        self.textBrowser_2.setObjectName("textBrowser_2")

        self.tabWidget.addTab(self.tab, "")

        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")

        self.pushButton_tab2 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_tab2.setGeometry(QtCore.QRect(500, 340, 40, 25))
        self.pushButton_tab2.setObjectName("save")

        # Added
        self.pushButton_tab2.clicked.connect(self.returnValuesFromCheckedBox)

        self.checkbox_objects = self.createCheckBoxServer()

        self.tabWidget.addTab(self.tab_2, "")

        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 414, 21))
        self.menubar.setObjectName("menubar")

        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_2.setText(_translate("MainWindow", "Download"))
        self.pushButton_3.setText(_translate("MainWindow", "Save Servers to Settings"))
        self.pushButton_4.setText(_translate("MainWindow", "Download from Settings"))
        # RadioButton Disabled
        # self.radioButton.setText(_translate("MainWindow", "1h"))
        # self.radioButton_2.setText(_translate("MainWindow", "12h"))
        # self.radioButton_3.setText(_translate("MainWindow", "24h"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Tab 1"))
        # self.checkBox.setText(_translate("MainWindow", "CheckBox")) removed test
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Tab 2"))

        self.pushButton_tab2.setText(_translate("MainWindow", "Save"))
        # list_of_checkbox_setText = []  # czy trzeba tutaj dodawac obiekt ?
        for one_chBox in self.checkbox_objects:
            # self.checkBox.setText(_translate("MainWindow", "CheckBox"))
            one_chBox.checkBox.setText(_translate("MainWindow", one_chBox.server_name))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
